{"id":"../node_modules/@uiw/react-md-editor/lib/cjs/utils/getSurroundingWord.js","dependencies":[{"name":"E:\\React\\askQuestion\\node_modules\\@uiw\\react-md-editor\\lib\\cjs\\utils\\getSurroundingWord.js.map","includedInParent":true,"mtime":499162500000},{"name":"E:\\React\\askQuestion\\package.json","includedInParent":true,"mtime":1602407828533},{"name":"E:\\React\\askQuestion\\node_modules\\@uiw\\react-md-editor\\package.json","includedInParent":true,"mtime":1602143344346}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getSurroundingWord;\n\nfunction getSurroundingWord(text, position) {\n  if (!text) throw Error(\"Argument 'text' should be truthy\");\n\n  var isWordDelimiter = function isWordDelimiter(c) {\n    return c === \" \" || c.charCodeAt(0) === 10;\n  }; // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration\n\n\n  var start = 0; // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation\n\n  var end = text.length; // iterate to the left\n\n  for (var i = position; i - 1 > -1; i--) {\n    if (isWordDelimiter(text[i - 1])) {\n      start = i;\n      break;\n    }\n  } // iterate to the right\n\n\n  for (var _i = position; _i < text.length; _i++) {\n    if (isWordDelimiter(text[_i])) {\n      end = _i;\n      break;\n    }\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n\nmodule.exports = exports.default; \n"},"sourceMaps":{"js":{"version":3,"sources":["../../../src/utils/getSurroundingWord.ts"],"names":["getSurroundingWord","text","position","Error","isWordDelimiter","c","charCodeAt","start","end","length","i"],"mappings":";;;;;;;AAEe,SAASA,kBAAT,CAA4BC,IAA5B,EAA0CC,QAA1C,EAAuE;AACpF,MAAI,CAACD,IAAL,EAAW,MAAME,KAAK,CAAC,kCAAD,CAAX;;AAEX,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD;AAAA,WAAeA,CAAC,KAAK,GAAN,IAAaA,CAAC,CAACC,UAAF,CAAa,CAAb,MAAoB,EAAhD;AAAA,GAAxB,CAHoF,CAKpF;;;AACA,MAAIC,KAAK,GAAG,CAAZ,CANoF,CAOpF;;AACA,MAAIC,GAAG,GAAGP,IAAI,CAACQ,MAAf,CARoF,CAUpF;;AACA,OAAK,IAAIC,CAAC,GAAGR,QAAb,EAAuBQ,CAAC,GAAG,CAAJ,GAAQ,CAAC,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACtC,QAAIN,eAAe,CAACH,IAAI,CAACS,CAAC,GAAG,CAAL,CAAL,CAAnB,EAAkC;AAChCH,MAAAA,KAAK,GAAGG,CAAR;AACA;AACD;AACF,GAhBmF,CAkBpF;;;AACA,OAAK,IAAIA,EAAC,GAAGR,QAAb,EAAuBQ,EAAC,GAAGT,IAAI,CAACQ,MAAhC,EAAwCC,EAAC,EAAzC,EAA6C;AAC3C,QAAIN,eAAe,CAACH,IAAI,CAACS,EAAD,CAAL,CAAnB,EAA8B;AAC5BF,MAAAA,GAAG,GAAGE,EAAN;AACA;AACD;AACF;;AAED,SAAO;AAAEH,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,GAAG,EAAHA;AAAT,GAAP;AACD","sourcesContent":["import { TextRange } from '../commands';\n\nexport default function getSurroundingWord(text: string, position: number): TextRange {\n  if (!text) throw Error(\"Argument 'text' should be truthy\");\n\n  const isWordDelimiter = (c: string) => c === \" \" || c.charCodeAt(0) === 10;\n\n  // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration\n  let start = 0;\n  // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation\n  let end = text.length;\n\n  // iterate to the left\n  for (let i = position; i - 1 > -1; i--) {\n    if (isWordDelimiter(text[i - 1])) {\n      start = i;\n      break;\n    }\n  }\n\n  // iterate to the right\n  for (let i = position; i < text.length; i++) {\n    if (isWordDelimiter(text[i])) {\n      end = i;\n      break;\n    }\n  }\n\n  return { start, end };\n}"]}},"error":null,"hash":"17de4455b59dbaf5407472c8c69d00aa","cacheData":{"env":{}}}