{"id":"evl8","dependencies":[{"name":"E:\\React\\askQuestion\\node_modules\\@uiw\\react-markdown-preview\\lib\\esm\\allowNode.js.map","includedInParent":true,"mtime":499162500000},{"name":"E:\\React\\askQuestion\\package.json","includedInParent":true,"mtime":1602430325976},{"name":"E:\\React\\askQuestion\\node_modules\\@uiw\\react-markdown-preview\\package.json","includedInParent":true,"mtime":1602143344419}],"generated":{"js":"\"use strict\";function e(e,t,r){return\"html\"===e.type&&(e.value=e.value.replace(/<((style|script|link|input|form)|\\/(style|script|link|input|form))(\\s?[^>]*>)/gi,function(e){return e.replace(/[<>]/g,function(e){return{\"<\":\"&lt;\",\">\":\"&gt;\"}[e]})})),!0}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":0}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":3,"column":15},"generated":{"line":1,"column":13}},{"source":"../../src/allowNode.tsx","name":"allowNode","original":{"line":3,"column":24},"generated":{"line":1,"column":22}},{"source":"../../src/allowNode.tsx","name":"node","original":{"line":3,"column":34},"generated":{"line":1,"column":24}},{"source":"../../src/allowNode.tsx","name":"index","original":{"line":3,"column":45},"generated":{"line":1,"column":26}},{"source":"../../src/allowNode.tsx","name":"parent","original":{"line":3,"column":60},"generated":{"line":1,"column":28}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":11,"column":9},"generated":{"line":1,"column":31}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":5,"column":23},"generated":{"line":1,"column":37}},{"source":"../../src/allowNode.tsx","name":"node","original":{"line":4,"column":46},"generated":{"line":1,"column":46}},{"source":"../../src/allowNode.tsx","name":"type","original":{"line":5,"column":14},"generated":{"line":1,"column":48}},{"source":"../../src/allowNode.tsx","name":"node","original":{"line":7,"column":4},"generated":{"line":1,"column":55}},{"source":"../../src/allowNode.tsx","name":"value","original":{"line":7,"column":9},"generated":{"line":1,"column":57}},{"source":"../../src/allowNode.tsx","name":"node","original":{"line":7,"column":17},"generated":{"line":1,"column":63}},{"source":"../../src/allowNode.tsx","name":"value","original":{"line":7,"column":22},"generated":{"line":1,"column":65}},{"source":"../../src/allowNode.tsx","name":"replace","original":{"line":7,"column":28},"generated":{"line":1,"column":71}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":7,"column":36},"generated":{"line":1,"column":79}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":7,"column":119},"generated":{"line":1,"column":161}},{"source":"../../src/allowNode.tsx","name":"a","original":{"line":7,"column":120},"generated":{"line":1,"column":170}},{"source":"../../src/allowNode.tsx","name":"a","original":{"line":8,"column":13},"generated":{"line":1,"column":173}},{"source":"../../src/allowNode.tsx","name":"a","original":{"line":8,"column":13},"generated":{"line":1,"column":180}},{"source":"../../src/allowNode.tsx","name":"replace","original":{"line":8,"column":15},"generated":{"line":1,"column":182}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":8,"column":23},"generated":{"line":1,"column":190}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":8,"column":32},"generated":{"line":1,"column":198}},{"source":"../../src/allowNode.tsx","name":"e","original":{"line":8,"column":33},"generated":{"line":1,"column":207}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":8,"column":49},"generated":{"line":1,"column":210}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":8,"column":49},"generated":{"line":1,"column":216}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":8,"column":56},"generated":{"line":1,"column":217}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":8,"column":56},"generated":{"line":1,"column":221}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":8,"column":69},"generated":{"line":1,"column":228}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":8,"column":69},"generated":{"line":1,"column":232}},{"source":"../../src/allowNode.tsx","name":"e","original":{"line":8,"column":108},"generated":{"line":1,"column":240}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":11,"column":9},"generated":{"line":1,"column":249}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":251}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":258}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":273}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":281}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":294}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":295}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":302}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":306}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":314}},{"source":"../../src/allowNode.tsx","name":null,"original":{"line":12,"column":1},"generated":{"line":1,"column":322}}],"sources":{"../../src/allowNode.tsx":"import { NodeType, MarkdownAbstractSyntaxTree } from 'react-markdown';\n\nexport default function allowNode(node: any, index: number, parent: NodeType) {\n  const nodeany: MarkdownAbstractSyntaxTree = node;\n  if (nodeany.type === 'html') {\n    // filter style\n    node.value = node.value.replace(/<((style|script|link|input|form)|\\/(style|script|link|input|form))(\\s?[^>]*>)/gi, (a: string) => {\n      return a.replace(/[<>]/g, (e: string) => (({ '<': '&lt;', '>': '&gt;' } as { [key: string]: string })[e]))\n    });\n  }\n  return true;\n}\n"},"lineCount":null}},"error":null,"hash":"204cc6dede961a542ca03a16e8defc82","cacheData":{"env":{}}}